name: Continuous integration

on:
  push:
    branches:
      - master

concurrency: master

jobs:
# github does not support dependencies on other workflows therefore we have to duplicate the code
# TODO(dmu) LOW: Fix this non-DRY approach if possible
# QUALITY-ASSURANCE-START
  quality-assurance:
    name: Quality Assurance
    runs-on: ubuntu-latest
    container: python:3.10.4-buster

    services:
      # TODO(dmu) LOW: This section duplicates services already defined in `docker-compose.yml`.
      #                Is there a way to make it DRY?
      db:
        image: postgres:14.2-alpine
        env:
          POSTGRES_DB: core
          POSTGRES_USER: core
          POSTGRES_PASSWORD: core

      redis:
        image: redis:6.2.6-alpine

    steps:
      - uses: actions/checkout@v2

      - name: Run Poetry image
        uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.13

      - name: Install
        run: make install && make install-pre-commit

      - name: Lint
        run: make lint

      - name: Test
        run: make test
        env:
          CORESETTING_DATABASES: '{"default":{"HOST":"db"}}'
          CORESETTING_CHANNEL_LAYERS: '{"default":{"CONFIG":{"hosts":[["redis", 6379]]}}}'
# QUALITY-ASSURANCE-END

  publish-images:
    name: Publish docker images
    needs: quality-assurance
    runs-on: ubuntu-latest
    steps:
      - name: Login to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push core image to Github Packages
        uses: docker/build-push-action@v2
        with:
          target: core
          tags: ghcr.io/thenewboston-developers/core:latest
          push: true
      - name: Push core-reverse-proxy image to Github Packages
        uses: docker/build-push-action@v2
        with:
          target: core-reverse-proxy
          tags: ghcr.io/thenewboston-developers/core-reverse-proxy:latest
          push: true
  deploy:
    name: Deploy to develoment environment
    environment: production
    needs: publish-images
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        # TODO(dmu) MEDIUM: Once/if github implements secrets on job level
        #                   https://github.com/actions/runner/issues/520#issuecomment-877193387
        if: ${{ env.CONTINUOUS_DEPLOYMENT_ENABLED == 'True' }}
        run: |
          mkdir -p ~/.ssh/
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/github
          chmod 600 ~/.ssh/github
          cat >>~/.ssh/config <<END
          Host target
            HostName $DEPLOY_SSH_HOST
            User $DEPLOY_SSH_USER
            IdentityFile ~/.ssh/github
            LogLevel ERROR
            StrictHostKeyChecking no
          END
        env:
          CONTINUOUS_DEPLOYMENT_ENABLED: ${{ secrets.CONTINUOUS_DEPLOYMENT_ENABLED }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DEPLOY_SSH_HOST: ${{ secrets.DEPLOY_SSH_HOST }}
          DEPLOY_SSH_USER: ${{ secrets.DEPLOY_SSH_USER }}

      - name: Run deploy
        # TODO(dmu) MEDIUM: Once/if github implements secrets on job level
        #                   https://github.com/actions/runner/issues/520#issuecomment-877193387
        if: ${{ env.CONTINUOUS_DEPLOYMENT_ENABLED == 'True' }}
        run: |
          ssh target "docker system prune --all --force && wget https://raw.githubusercontent.com/thenewboston-developers/Core/master/scripts/deploy.sh -O /tmp/deploy-core.sh && chmod a+x /tmp/deploy-core.sh && /tmp/deploy-core.sh ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }} && rm -f /tmp/deploy-core.sh"
        env:
          CONTINUOUS_DEPLOYMENT_ENABLED: ${{ secrets.CONTINUOUS_DEPLOYMENT_ENABLED }}
